#include <iostream>
#include <getopt.h>
#include <netdb.h>
#include <netinet/in.h>
#include <stdlib.h>
#include <string.h>
#include <bitset>
#include <sys/socket.h>
#include <sys/types.h>
#include <iomanip>
#include <cstring>
#include <sstream>
#include <unistd.h>
#include <vector>
#include <fcntl.h>
#include "ldap.h"

#define MAX 80
#define BUFFER_SIZE 1024

class helpFunctions{
public:
    int argumentsCheck(int argc, char* argv[], Args *arguments){
        int getOptRet;
        while((getOptRet = getopt_long(argc, argv, "p:f:", longOptions, nullptr)) != -1){
            switch (getOptRet) {
                case 'p':
                    arguments->port = std::stoi(optarg);
                    break;
                case 'f':
                    arguments->pathToFile = optarg;
                    break;
                default:
                    return 1;
            }
        }
        return 0;

    }
};

class server {
public:
    Args arguments;

    void createSocket(){
        if ((cSocket = socket(AF_INET, SOCK_STREAM, 0)) <= 0)
        {
            std::cerr << "ERROR: problem with creating socket" << std::endl;
            exit(EXIT_FAILURE);
        }
        bzero(&serverAdress, sizeof(serverAdress));
    }

    void assignAddres(){
        serverAdress.sin_family = AF_INET;
        serverAdress.sin_addr.s_addr = htonl(INADDR_ANY);
        serverAdress.sin_port = htons(arguments.port);
    }

    void bindSocket(){
        //todo SO_REUSEADDR
        if((bind(cSocket, (sockaddr*)&serverAdress, sizeof(serverAdress))) != 0){
            std::cerr << "ERROR: problem with binding" << std::endl;
            exit(EXIT_FAILURE);
        }
        else{
            std::cout << "Binded" << std::endl;
        }
    }

    void listenS(){
        if((listen(cSocket, 5)) != 0){
            std::cerr << "ERROR: listen error" << std::endl;
            exit(EXIT_FAILURE);
        }
        length = sizeof(client);
    }
    void readPacket(){
        packet = accept(cSocket, (sockaddr*)&client, reinterpret_cast<socklen_t *>(&length));
        if(packet < 0){
            std::cerr << "ERROR: accept failed" << std::endl;
            exit(EXIT_FAILURE);
        }
        else{
            std::cout << "Accept ok" << std::endl;
        }
    }

    void closeSocket(){
        close(cSocket);
    }

    void ldapProtocol() {
        unsigned char buff[BUFFER_SIZE];
        std::stringstream readRequest;
        int bytesRead;

        fcntl(packet, F_SETFL, O_NONBLOCK);
        //todo maby problem with size of emptying
        bzero(buff, BUFFER_SIZE);

        while ((bytesRead = recv(packet, buffer, BUFFER_SIZE, 0)) > 0) {
            for (int i = 0; i < bytesRead; i++){
                readRequest <<  std::setfill('0') << std::setw(2) << std::hex<< std::bitset<8>(buffer[i]).to_ulong();
            }
            bzero(buff, BUFFER_SIZE);
        }
        request = readRequest.str();
    }

private:
    int cSocket, packet, length;
    int first = 0;
    struct sockaddr_in serverAdress, client;
    char buffer[BUFFER_SIZE];
    std::string request;

};

int main(int argc, char* argv[]) {
    Args arguments;
    helpFunctions help;
    server serverO;

    if(help.argumentsCheck(argc, argv, &arguments) == 1){
        return 1;
    }

    serverO.arguments.port = arguments.port;
    serverO.arguments.pathToFile = arguments.pathToFile;

    std::cout << arguments.port << " " << arguments.pathToFile;

    serverO.createSocket();
    serverO.assignAddres();
    serverO.bindSocket();
    serverO.listenS();
    for(;;) {
        //todo add this part to loop so the communication is asynchronous
        serverO.readPacket();

        //communication loop
        serverO.ldapProtocol();
    }

    serverO.closeSocket();
    return 0;
}
